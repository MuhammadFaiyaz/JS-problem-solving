/*---------------------------------------------------------------------------------------------------
                                Single-threaded পিপড়া
--------------------------------------------------------------------------------------------------*/
/*
1. সিনক্রোনাস কোডের মধ্যে ফাংশন কল করার পর কি হবে ? */
// আগের মতই একটার পর একটা লাইন সিরিয়ালি (ক্রম অনুযায়ী) চলতে থাকবে।

/*
2. জাভাস্ক্রিপ্ট কি সিঙ্গেল থ্রেডেড? */
// হুম। সাধারনত।

/*---------------------------------------------------------------------------------------------------
                                Time  ছাড়া Timeout
--------------------------------------------------------------------------------------------------*/

/*
1. setTimeout() দিয়ে একটা ফাংশন তৈরি কর, যেখানে 3 সেকেন্ড পর “I wasted 3 seconds of my life by looking at screen and doing nothing” প্রিন্ট হবে। */
// setTimeout(() => {
//   console.log(
//     'I wasted 3 seconds of my life by looking at screen and doing nohting'
//   );
// }, 3000);

/*
2. দুই সেকেন্ড পর পর একটা একটা করে সংখ্যা দেখাবে। 131 থেকে শুরু হবে এবং প্রতিবার দুই করে বাড়বে। */
// let num = 131;
// setInterval(() => {
//   console.log(num);
//   num += 2;
// }, 2000);

/*
3. দুই সেকেন্ড পরপর কনসোলে I am learning javascript লগ করবি এবং ৬ বার আউটপুট দেখানোর পর
থেমে যাবে। */
let dial = 0;
// const clearinterval = setInterval(() => {
//   dial++;
//   console.log('I am learning javascript');
//   if (dial === 6) {
//     clearInterval(clearinterval);
//   }
// }, 2000);

/* 
4. setTimeout()-এর সেকেন্ড প্যারামিটার বাদ দিলে ডিফল্ট হিসেবে কত মাইক্রোসেকেন্ড ধরে নেয়? */
// 0 মাইক্রোসেকেন্ড ধরে নেয়।
/*---------------------------------------------------------------------------------------------------
                               জাভাস্ক্রিপ্টের স্যুপ  Event loop
--------------------------------------------------------------------------------------------------*/
/*
1. ইভেন্ট লুপ কীভাবে কাজ করে, বিস্তৃত ব্যাখ্যা কর। */
/**ইভেন্ট লুপ হলো একটি মেকানিজম যা JavaScript-এ asynchronous কাজগুলো পরিচালনা করে। এটি Call Stack 
 খালি আছে কি না তা চেক করে, আর খালি থাকলে Callback Queue থেকে একটি ফাংশন নিয়ে Call Stack-এ পাঠায়।

এর ফলে JavaScript একসাথে অনেক কাজ করতে পারে, যদিও এটি single-threaded। যেমন setTimeout, fetch ইত্যাদি 
কাজ শেষ হলে callback গুলো Queue-তে জমা হয়, আর Event Loop ধীরে ধীরে সেগুলো execute করে। */

/*
2. call stack আর callback queue-এর মধ্যে ডিফারেন্স কী। */
/* call stack Synchronous (তাৎক্ষণিক) কোড এক্সিকিউট করে, callback queue হলো অপেক্ষমাণ কাজের জায়গা, 
যেগুলো Event Loop পরে Call Stack-এ পাঠায় যখন Call Stack খালি হয়। */

/*
3. জাভাস্ক্রিপ্ট যদি সিঙ্গেল থ্রেডেড হয়, তাহলে asynchronous কাজগুলো কীভাবে হ্যান্ডেল করে? */
/* JavaScript সিঙ্গেল থ্রেডেড হলেও asynchronous কাজগুলো Browser/Web APIs ও Event Loop ব্যবস্থার মাধ্যমে handle করে। যখন JavaScript-এ কোনও asynchronous কাজ যেমন `setTimeout` বা `fetch` চালানো হয়, তখন সেই কাজটি সরাসরি Call Stack-এ এক্সিকিউট না হয়ে ব্রাউজারের Web API অংশে পাঠানো হয়। এই অংশটি এই ধরনের সময়সাপেক্ষ কাজ নিজ দায়িত্বে পরিচালনা করে। উদাহরণস্বরূপ, যদি `setTimeout` ব্যবহার করে কোনও কোড ২ সেকেন্ড পরে চালানোর জন্য দেওয়া হয়, তাহলে Web API সেই টাইমার চালু রাখে, কিন্তু মূল JavaScript থ্রেড ব্যস্ত থাকে না — বরং অন্য কাজ চালিয়ে যেতে পারে। যখন সেই টাইম শেষ হয় বা fetch-এর মতো নেটওয়ার্ক রিকোয়েস্ট শেষ হয়ে যায়, তখন সংশ্লিষ্ট callback ফাংশনটি Callback Queue-তে পাঠিয়ে রাখা হয়। এরপর Event Loop কাজ করে — এটি নিয়মিত পর্যবেক্ষণ করে যে Call Stack খালি আছে কি না। যদি Call Stack খালি থাকে, অর্থাৎ বর্তমানে কোনও synchronous কাজ না চলতে থাকে, তাহলে Event Loop Callback Queue থেকে একটি কাজ নিয়ে Call Stack-এ পাঠিয়ে দেয় এক্সিকিউশনের জন্য। এভাবেই JavaScript সিঙ্গেল থ্রেডেড হয়েও অসাধারণভাবে asynchronous কাজগুলো হ্যান্ডেল করে থাকে।

 */

/*---------------------------------------------------------------------------------------------------
                                রহস্যময়ী জাভাস্ক্রিপ্টের আসল রূপ
--------------------------------------------------------------------------------------------------*/
/* 
1. জাভাস্ক্রিপ্ট কীভাবে কোড রান করে ?
জাভাস্ক্রিপ্ট কোড চালানোর সময় V8 ইঞ্জিন প্রথমে কোডটি parse করে, অর্থাৎ গঠন বুঝে নেয়। এরপর Interpreter কোডটি একবার পড়ে চালানো শুরু করে। পরে JIT (Just-In-Time) Compiler আসে, যেটি বারবার চলা অংশগুলোকে Machine Code-এ রূপান্তর করে দেয়। এর ফলে সেই অংশগুলো পরবর্তীতে অনেক দ্রুত চলে। এই পুরো প্রক্রিয়ায় কোডটি দ্রুত এবং দক্ষভাবে রান হয় ও আউটপুট দেয়। */

/*
2. What is JavaScript? 
JavaScript (JS) is a high-level, dynamic, prototype-based, multi-paradigm programming language. 
It is Just-In-Time (JIT) compiled, meaning it executes efficiently without needing pre-compilation, and it uses garbage collection to manage memory automatically. 
JavaScript is widely used for web development, allowing developers to create interactive and dynamic websites.
*/

/*
3. JIT compiled process বোঝানোর জন্য একটি ধাপের flowchart কোড লিখ। */
/* প্রথমে সোর্স কোড থেকে বাইটকোড তৈরি হয়। তারপর প্রোগ্রাম চালু হয়। যদি JIT কম্পাইলার থাকে, তাহলে বাইটকোডকে নেটিভ মেশিন কোডে রূপান্তর করে এবং সেই কোড ক্যাশ করে। তারপর সেই নেটিভ কোড এক্সিকিউট হয়, অন্যথায় বাইটকোড ইন্টারপ্রেট করে। প্রোগ্রাম শেষ হলে শেষ।
 */

/*
4. জাভাস্ক্রিপ্ট Memory management এবং garbage collection প্রসেস কীভাবে কাজ করে ?
জাভাস্ক্রিপ্ট মেমরি ম্যানেজমেন্ট হল মেমরি বরাদ্দ ও মুক্ত করার পুরো প্রক্রিয়া, যাতে প্রোগ্রাম সুষ্ঠুভাবে এবং দ্রুতগতিতে চলতে পারে।
জাভাস্ক্রিপ্টে মেমরি ম্যানেজমেন্ট মূলত অটোমেটিক হয়। যখন আপনি কোনো ভ্যারিয়েবল বা অবজেক্ট তৈরি করেন, তখন জাভাস্ক্রিপ্ট ইঞ্জিন মেমরি থেকে জায়গা আলোকেট করে সেই ডেটা রাখে। কিন্তু মেমরি সীমিত হওয়ায় এবং পারফরম্যান্স ভালো রাখার জন্য অপ্রয়োজনীয় ডেটা, অর্থাৎ যেগুলো আর কোডে ব্যবহৃত হচ্ছে না, সেগুলো মেমরি থেকে মুক্ত করে দেওয়া দরকার। এই কাজটাই করে গার্বেজ কালেকশন।
*/
